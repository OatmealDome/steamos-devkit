#!/usr/bin/env python3

import sys
import os
import logging
import argparse
import enum
import subprocess

logging.basicConfig(format='%(message)s', level=logging.DEBUG)
logger = logging.getLogger(__name__)

DEVKIT_TOOL_FOLDER = os.path.expanduser('~/devkit-game')

class SteamStatus(enum.Enum):
    # Supported values from steamos-get-status
    OS = 2
    OS_DEV = 3
    SIDE = 4

STATUS_STRINGS = [
    ( SteamStatus.OS, 'SteamStatus.OS' ),
    ( SteamStatus.OS_DEV, 'SteamStatus.OS_DEV' ),
    ( SteamStatus.SIDE, 'SteamStatus.SIDE' ),
]

# gamescope-session passes the execution to this script if it exists rather than start steam itself
DEVKIT_STEAM_TRAMPOLINE = os.path.expanduser('~/devkit-game/devkit-steam')

# this script executes the side loaded Steam client (part of the steamos-devkit-service package)
SIDE_LOADED_STEAM_CLIENT = '/usr/share/steamos-devkit/bin/devkit-standalone.py'

def write_trampoline(text):
    with open(DEVKIT_STEAM_TRAMPOLINE, 'w') as devkit_steam:
        devkit_steam.write(text)
        devkit_steam.flush()
    os.chmod(DEVKIT_STEAM_TRAMPOLINE, 0o770)
    # trying really hard to avoid leaving a zero sized trampoline if the deck is about to hang on the sddm restart coming next
    subprocess.run('/usr/bin/sync')

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--verbose', required=False, action='store_true')
    parser.add_argument('--client', action='store', required=True, choices=[ v[1] for v in STATUS_STRINGS ])
    parser.add_argument('--command', action='store', required=False, help='full steam startup command - will attempt to extract command line arguments or fallback to using devkit-standalone.py')
    parser.add_argument('--args', action='store', required=False, help='steam client command line arguments')
    parser.add_argument('--gdbserver', action='store_true', required=False)
    conf = parser.parse_args()

    if conf.verbose:
        logger.setLevel(logging.DEBUG)
    else:
        logger.setLevel(logging.INFO)

    target = [ v for v in STATUS_STRINGS if v[1] == conf.client ][0][0]
    logging.info(f'Set steam client on device to {target}')

    if os.path.exists(DEVKIT_STEAM_TRAMPOLINE):
        os.unlink(DEVKIT_STEAM_TRAMPOLINE)

    if target == SteamStatus.OS:
        logger.info('Devkit Steam client override is disabled - default OS client execution will resume.')
        sys.exit(0)

    os.makedirs(os.path.dirname(DEVKIT_STEAM_TRAMPOLINE), exist_ok=True)

    # OS client
    steam_client = '$HOME/.local/share/Steam/steam.sh'
    if target == SteamStatus.SIDE:
        steam_client = '$HOME/devkit-game/steam/steam.sh'

    args = '"$@"'
    if conf.args is not None:
        args = conf.args
        if conf.command is not None:
            logger.warning('warning: --args option overrides anything passed in --command, ignoring')
    elif conf.command is not None:
        tokens = conf.command.split(' ')
        if tokens[0].lower().find('steam.sh') != -1:
            # let's assume we can extract command line arguments and run directly via the trampoline
            args = ' '.join(tokens[1:])
        else:
            # extracting command line arguments doesn't seem safe, the command could be something like this:
            # sh -c "<whatever>; ./steam.sh <blah>"
            # for now we will chuck this to the legacy SIDE_LOADED_STEAM_CLIENT,
            # which takes it's command from steam-argv.json
            # (we're not going to attempt anything with gdbserver either)
            write_trampoline('''#!/bin/bash
# Generated by steamos-set-steam-client, do not edit!
# configuration tag (do not delete): {}
exec {} steam &> $HOME/.steam/steam/logs/output.log
'''.format(
    conf.client,
    SIDE_LOADED_STEAM_CLIENT
))
            sys.exit(0) # done!

    gdbserver = ''
    if conf.gdbserver:
        gdbserver = 'export DEBUGGER="gdbserver 0.0.0.0:2345"'

    write_trampoline('''#!/bin/bash
# Generated by steamos-set-steam-client, do not edit!
# configuration tag (do not delete): {}
{}
exec {} {} &> $HOME/.steam/steam/logs/output.log
'''.format(
    conf.client,
    gdbserver,
    steam_client,
    args
))
